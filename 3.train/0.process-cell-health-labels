{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Process Cell Health Labels\n",
    "\n",
    "The raw data exists as manually edited excel spreadsheets.\n",
    "Process into a single data frame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\"ES2_375CPW_BenchmarksV1_CellCycle_Avg_CV_FC_Zscore_Z'_ValuesOnly.xlsx\",\n",
       " \"A549_BenchmarksV1-2_CellCycle_Avg_CV_FC_Zscore_Z'_ValuesOnly.xlsx\",\n",
       " \"HCC44_150CPW_BenchmarksV1.1_Cell Cycle_CV_Avg_FC_Zscore_Z'_ValuesOnly.xlsx\",\n",
       " \"HCC44_150CPW_BenchmarksV1.1_Viability_ROS_CV_Avg_FC_Zscore_Z'_ValuesOnly.xlsx\",\n",
       " \"A549_BenchmarksV1-2_Viability_ROS_Avg_CV_FC_Zscore_Z'_ValuesOnly.xlsx\",\n",
       " \"ES2_375CPW_BenchmarksV1_Viability_ROS_CV_Avg_FC_Zscore_Z'_ValuesOnly.xlsx\"]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dir = os.path.join(\"data\", \"raw\")\n",
    "files = os.listdir(data_dir)\n",
    "files = [x for x in files if '.xlsx' in x]\n",
    "files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build Dictionaries for Feature Recoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "viability_col_names = {\n",
    "    \"Row\": \"well_row\",\n",
    "    \"Column\": \"well_col\",\n",
    "    \"Plate Name\": \"plate_name\",\n",
    "    \"sgRNA\": \"guide\",\n",
    "    \"Inf %\": \"vb_infection_percentage\",\n",
    "    '% Inf': \"vb_infection_percentage\",\n",
    "    '% Live': \"vb_percent_live\",\n",
    "    '% Dead': \"vb_percent_dead\",\n",
    "    '% All Apoptosis': \"vb_percent_all_apoptosis\",\n",
    "    '% Early Apop': \"vb_percent_all_early_apoptosis\",\n",
    "    '% Late Apop': \"vb_percent_all_late_apoptosis\",\n",
    "    '% Dead Only': \"vb_percent_dead_only\",\n",
    "    '# Live Cells': \"vb_num_live_cells\",\n",
    "    'ROS Mean': \"vb_ros_mean\",\n",
    "    'ROS-back Mean': \"vb_ros_back_mean\",\n",
    "    ' Live Cell Area [µm²]': \"vb_live_cell_area\",\n",
    "    'Live Cell Roundness': \"vb_live_cell_roundness\",\n",
    "    'Live Width:Length': \"vb_live_cell_width_length\",\n",
    "    '% Caspase/%Dead Only': \"vb_percent_caspase_dead_only\"\n",
    "}\n",
    "\n",
    "cell_cycle_col_names = {\n",
    "    \"Row\": \"well_row\",\n",
    "    \"Column\": \"well_col\",\n",
    "    \"Plate Name\": \"plate_name\",\n",
    "    \"sgRNA\": \"guide\",\n",
    "    \"Inf %\": \"cc_infection_percentage\",\n",
    "    \"CC - Number of Objects\": \"cc_cc_n_objects\",\n",
    "    \"CC - Number of Spots - Mean per Well\": \"cc_cc_n_spots_mean\",\n",
    "    \"CC - Number of Spots per Area of Nucleus - Mean per Well\": \"cc_cc_n_spots_per_nucleus_area_mean\",\n",
    "    \"CC - High number of spots gH2AX - Mean per Well\": \"cc_cc_high_n_spots_h2ax_mean\",\n",
    "    \"CC - edu positive - Mean per Well\": \"cc_cc_edu_pos_mean\",\n",
    "    \"CC - G1 - Mean per Well\": \"cc_cc_g1_mean\",\n",
    "    \"CC - G2-pH3 - Mean per Well\": \"cc_cc_g2_ph3_neg_mean\",\n",
    "    \"CC - G2+pH3 (Early mitiosis) - Mean per Well\": \"cc_cc_g2_ph3_pos_early_mitosis_mean\",\n",
    "    \"CC - pH3 positive, Hoechst condenced (mitosis) - Mean per ...\": \"cc_cc_ph3_pos_hoechst_mitosis_mean\",\n",
    "    \"CC - pH3 neg, Hoechst cond (late mitosis) - Mean per Well\": \"cc_cc_ph3_neg_hoechst_late_mitosis_mean\",\n",
    "    \"ALL - Number of Objects\": \"cc_all_n_objects\",\n",
    "    'ALL - Nucleus Area [µm²] - Mean per Well': \"cc_all_nucleus_area_mean\",\n",
    "    'ALL - Nucleus Roundness - Mean per Well': \"cc_all_nucleus_roundness_mean\",\n",
    "    'ALL - Number of Spots - Mean per Well': \"cc_all_n_spots_mean\",\n",
    "    'ALL - Number of Spots per Area of Nucleus - Mean per Well': \"cc_all_n_spots_per_nucleus_area_mean\",\n",
    "    'ALL - High number of spots gH2AX - Mean per Well': \"cc_all_high_n_spots_h2ax_mean\",\n",
    "    'ALL - Large round (polyploid) - Mean per Well': \"cc_all_large_round_polyploid_mean\",\n",
    "    'ALL - large not round (polynuclear) - Mean per Well': \"cc_all_large_notround_polynuclear_mean\",\n",
    "    'Large round (polyploid) - Number of Objects': \"cc_polyploid_n_objects\",\n",
    "    'Large round (polyploid) - Number of Spots - Mean per Well': \"cc_polyploid_n_spots_mean\",\n",
    "    'Large round (polyploid) - Number of Spots per Area of Nucleus - Mean per Well': \"cc_polyploid_n_spots_per_nucleus_area_mean\",\n",
    "    'Large round (polyploid) - High number of spots gH2AX - Mean per Well': \"cc_polyploid_high_n_spots_h2ax_mean\",\n",
    "    'large not round (polynuclear) - Number of Objects': \"cc_polynuclear_n_objects\",\n",
    "    'large not round (polynuclear) - Number of Spots - Mean per Well': \"cc_polynuclear_n_spots_mean\",\n",
    "    'large not round (polynuclear) - Number of Spots per Area of Nucleus - Mean pe...': \"cc_polynuclear_n_spots_per_nucleus_area_mean\",\n",
    "    'large not round (polynuclear) - High number of spots gH2AX - Mean per Well': \"cc_polynuclear_high_n_spots_h2ax_mean\",\n",
    "    'edu positive - Number of Objects': \"cc_edu_pos_n_objects\",\n",
    "    'edu positive - Intensity Nucleus Alexa 647 Mean - Mean per Well': \"cc_edu_pos_alexa647_intensity_nucleus_area_mean\",\n",
    "    'edu positive - Intensity Nucleus Alexa 647 Sum - Sum per Well': \"cc_edu_pos_alexa647_intensity_nucleus_area_sum\",\n",
    "    'edu positive - Number of Spots - Mean per Well': \"cc_edu_pos_n_spots_mean\",\n",
    "    'edu positive - Number of Spots per Area of Nucleus - Mean per Well': \"cc_edu_pos_n_spots_per_nucleus_area_mean\",\n",
    "    'edu positive - High number of spots gH2AX - Mean per Well': \"cc_edu_pos_high_n_spots_h2ax_mean\",\n",
    "    'G1 - Number of Objects': \"cc_g1_n_objects\",\n",
    "    'G1 - Number of Spots - Mean per Well': \"cc_g1_n_spots_mean\",\n",
    "    'G1 - Number of Spots per Area of Nucleus - Mean per Well': \"cc_g1_n_spots_per_nucleus_area_mean\",\n",
    "    'G1 - High number of spots gH2AX - Mean per Well': \"cc_g1_high_n_spots_h2ax_mean\",\n",
    "    'G2-pH3 - Number of Objects': \"cc_g2_ph3_neg_n_objects\",\n",
    "    'G2-pH3 - Number of Spots - Mean per Well': \"cc_g2_ph3_neg_n_spots_mean\",\n",
    "    'G2-pH3 - Number of Spots per Area of Nucleus - Mean per Well': \"cc_g2_ph3_neg_n_spots_per_nucleus_area_mean\",\n",
    "    'G2-pH3 - High number of spots gH2AX - Mean per Well': \"cc_g2_ph3_neg_high_n_spots_h2ax_mean\",\n",
    "    'G2+pH3 (Early mitiosis) - Number of Objects': \"cc_g2_ph3_pos_n_objects\",\n",
    "    'G2+pH3 (Early mitiosis) - Number of Spots - Mean per Well': \"cc_g2_ph3_pos_n_spots_mean\",\n",
    "    'G2+pH3 (Early mitiosis) - Number of Spots per Area of Nucleus - Mean per Well': \"cc_g2_ph3_pos_n_spots_per_nucleus_area_mean\",\n",
    "    'G2+pH3 (Early mitiosis) - High number of spots gH2AX - Mean per Well': \"cc_g2_ph3_pos_high_n_spots_h2ax_mean\",\n",
    "    'pH3 positive, Hoechst condenced (mitosis) - Number of Objects': \"cc_mitosis_ph3_pos_n_objects\",\n",
    "    'pH3 positive, Hoechst condenced (mitosis) - Number of Spots - Mean per Well': \"cc_mitosis_ph3_pos_n_spots_mean\",\n",
    "    'pH3 positive, Hoechst condenced (mitosis) - Number of Spots per Area of Nucle...': \"cc_mitosis_ph3_pos_n_spots_per_nucleus_area_mean\",\n",
    "    'pH3 positive, Hoechst condenced (mitosis) - High number of spots gH2AX - Mean...': \"cc_mitosis_ph3_pos_high_n_spots_h2ax_mean\",\n",
    "    'pH3 neg, Hoechst cond (late mitosis) - Number of Objects': \"cc_mitosis_ph3_neg_n_objects\",\n",
    "    'pH3 neg, Hoechst cond (late mitosis) - Number of Spots - Mean per Well': \"cc_mitosis_ph3_neg_n_spots_mean\",\n",
    "    'pH3 neg, Hoechst cond (late mitosis) - Number of Spots per Area of Nucleus - ...': \"cc_mitosis_ph3_neg_n_spots_per_nucleus_area_mean\",\n",
    "    'pH3 neg, Hoechst cond (late mitosis) - High number of spots gH2AX - Mean per ...': \"cc_mitosis_ph3_neg_high_n_spots_h2ax_mean\",\n",
    "    'G1/S': \"cc_g1_s\",\n",
    "    'G2/G1': \"cc_g2_g1\",\n",
    "    'G1+G2': \"cc_g1_plus_g2\",\n",
    "    'G2 + All M-phase': \"cc_g2_plus_all_m\"\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load and Process Files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "processing: ES2_375CPW_BenchmarksV1_CellCycle_Avg_CV_FC_Zscore_Z'_ValuesOnly.xlsx ...\n",
      "processing: A549_BenchmarksV1-2_CellCycle_Avg_CV_FC_Zscore_Z'_ValuesOnly.xlsx ...\n",
      "processing: HCC44_150CPW_BenchmarksV1.1_Cell Cycle_CV_Avg_FC_Zscore_Z'_ValuesOnly.xlsx ...\n",
      "processing: HCC44_150CPW_BenchmarksV1.1_Viability_ROS_CV_Avg_FC_Zscore_Z'_ValuesOnly.xlsx ...\n",
      "processing: A549_BenchmarksV1-2_Viability_ROS_Avg_CV_FC_Zscore_Z'_ValuesOnly.xlsx ...\n",
      "processing: ES2_375CPW_BenchmarksV1_Viability_ROS_CV_Avg_FC_Zscore_Z'_ValuesOnly.xlsx ...\n"
     ]
    }
   ],
   "source": [
    "df_dict = {}\n",
    "df_dict['viability'] = []\n",
    "df_dict['cell_cycle'] = []\n",
    "\n",
    "for file in files:\n",
    "    print(\"processing: {} ...\".format(file))\n",
    "\n",
    "    # Load Data\n",
    "    df = pd.read_excel(os.path.join(data_dir, file))\n",
    "    \n",
    "    # Extract info from the file name\n",
    "    cell_line = file.split(\"_\")[0]\n",
    "   \n",
    "    if \"Viability\" in file:\n",
    "        file_type = \"viability\"\n",
    "        viab_cols = df.columns.tolist()\n",
    "        if cell_line == \"A549\":\n",
    "            subset_string = \"Avg\"\n",
    "        else:\n",
    "            subset_string = \"%CV\"\n",
    "        \n",
    "    else:\n",
    "        file_type = \"cell_cycle\"\n",
    "        cell_cols = df.columns.tolist()\n",
    "        if cell_line == \"ES2\":\n",
    "            subset_string = \"Avg.\"\n",
    "        else:\n",
    "            subset_string = \"Avg\"\n",
    "    \n",
    "    # There are many additional columns that calculate averages, remove them\n",
    "    subset_col = np.argwhere(df.columns.str.contains(subset_string))[0][0]\n",
    "    df = df.iloc[:, 0:subset_col]\n",
    "    \n",
    "    # The first row stores column names\n",
    "    cols = df.iloc[0, :]\n",
    "    df = df.iloc[1:, :]\n",
    "    df.columns = cols\n",
    "\n",
    "    # Drop rows where all values are NA\n",
    "    df = df.dropna(axis='index', how='all')\n",
    "\n",
    "    # Generate new columns for merging\n",
    "    df = df.assign(cell_id=cell_line)\n",
    "    \n",
    "    # Recode column names\n",
    "    if file_type == \"cell_cycle\":\n",
    "        col_names = cell_cycle_col_names\n",
    "    else:\n",
    "        col_names = viability_col_names\n",
    "        \n",
    "    df = df.rename(col_names, axis='columns')\n",
    "\n",
    "    # Drop a column for specific dataframe\n",
    "    if cell_line == \"A549\" and file_type == \"cell_cycle\":\n",
    "        df = df.drop(\"cc_g1_s\", axis=\"columns\")\n",
    "    \n",
    "    # Recode the Empty guides\n",
    "    df.loc[df.guide.str.capitalize() == \"Empty\", \"guide\"] = \"EMPTY\"\n",
    "\n",
    "    df_dict[file_type].append(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Concatenate and Merge into single DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2223, 61)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cc_all_high_n_spots_h2ax_mean</th>\n",
       "      <th>cc_all_large_notround_polynuclear_mean</th>\n",
       "      <th>cc_all_large_round_polyploid_mean</th>\n",
       "      <th>cc_all_n_objects</th>\n",
       "      <th>cc_all_n_spots_mean</th>\n",
       "      <th>cc_all_n_spots_per_nucleus_area_mean</th>\n",
       "      <th>cc_all_nucleus_area_mean</th>\n",
       "      <th>cc_all_nucleus_roundness_mean</th>\n",
       "      <th>cc_cc_edu_pos_mean</th>\n",
       "      <th>cc_cc_g1_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>cc_polynuclear_n_spots_per_nucleus_area_mean</th>\n",
       "      <th>cc_polyploid_high_n_spots_h2ax_mean</th>\n",
       "      <th>cc_polyploid_n_objects</th>\n",
       "      <th>cc_polyploid_n_spots_mean</th>\n",
       "      <th>cc_polyploid_n_spots_per_nucleus_area_mean</th>\n",
       "      <th>cell_id</th>\n",
       "      <th>guide</th>\n",
       "      <th>plate_name</th>\n",
       "      <th>well_col</th>\n",
       "      <th>well_row</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.04287</td>\n",
       "      <td>0.007976</td>\n",
       "      <td>0.003988</td>\n",
       "      <td>1003</td>\n",
       "      <td>1.777</td>\n",
       "      <td>67.61</td>\n",
       "      <td>166.2</td>\n",
       "      <td>0.899</td>\n",
       "      <td>0.3865</td>\n",
       "      <td>0.4577</td>\n",
       "      <td>...</td>\n",
       "      <td>274.6</td>\n",
       "      <td>0.25</td>\n",
       "      <td>4</td>\n",
       "      <td>5.5</td>\n",
       "      <td>153.3</td>\n",
       "      <td>ES2</td>\n",
       "      <td>AKT1-1</td>\n",
       "      <td>Plate 1</td>\n",
       "      <td>3</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02635</td>\n",
       "      <td>0.005988</td>\n",
       "      <td>0.005988</td>\n",
       "      <td>835</td>\n",
       "      <td>1.582</td>\n",
       "      <td>58.99</td>\n",
       "      <td>156.2</td>\n",
       "      <td>0.9011</td>\n",
       "      <td>0.355</td>\n",
       "      <td>0.5065</td>\n",
       "      <td>...</td>\n",
       "      <td>144.2</td>\n",
       "      <td>0.4</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>257.4</td>\n",
       "      <td>ES2</td>\n",
       "      <td>AKT1-1</td>\n",
       "      <td>Plate 1</td>\n",
       "      <td>22</td>\n",
       "      <td>O</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "0 cc_all_high_n_spots_h2ax_mean cc_all_large_notround_polynuclear_mean  \\\n",
       "1                       0.04287                               0.007976   \n",
       "2                       0.02635                               0.005988   \n",
       "\n",
       "0 cc_all_large_round_polyploid_mean cc_all_n_objects cc_all_n_spots_mean  \\\n",
       "1                          0.003988             1003               1.777   \n",
       "2                          0.005988              835               1.582   \n",
       "\n",
       "0 cc_all_n_spots_per_nucleus_area_mean cc_all_nucleus_area_mean  \\\n",
       "1                                67.61                    166.2   \n",
       "2                                58.99                    156.2   \n",
       "\n",
       "0 cc_all_nucleus_roundness_mean cc_cc_edu_pos_mean cc_cc_g1_mean  ...  \\\n",
       "1                         0.899             0.3865        0.4577  ...   \n",
       "2                        0.9011              0.355        0.5065  ...   \n",
       "\n",
       "0 cc_polynuclear_n_spots_per_nucleus_area_mean  \\\n",
       "1                                        274.6   \n",
       "2                                        144.2   \n",
       "\n",
       "0 cc_polyploid_high_n_spots_h2ax_mean cc_polyploid_n_objects  \\\n",
       "1                                0.25                      4   \n",
       "2                                 0.4                      5   \n",
       "\n",
       "0 cc_polyploid_n_spots_mean cc_polyploid_n_spots_per_nucleus_area_mean  \\\n",
       "1                       5.5                                      153.3   \n",
       "2                         9                                      257.4   \n",
       "\n",
       "0 cell_id   guide plate_name well_col well_row  \n",
       "1     ES2  AKT1-1    Plate 1        3        A  \n",
       "2     ES2  AKT1-1    Plate 1       22        O  \n",
       "\n",
       "[2 rows x 61 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cc_df = pd.concat(df_dict['cell_cycle'], sort=True)\n",
    "cc_df = cc_df.drop_duplicates()\n",
    "\n",
    "print(cc_df.shape)\n",
    "cc_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2302, 19)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cell_id</th>\n",
       "      <th>guide</th>\n",
       "      <th>plate_name</th>\n",
       "      <th>vb_infection_percentage</th>\n",
       "      <th>vb_live_cell_area</th>\n",
       "      <th>vb_live_cell_roundness</th>\n",
       "      <th>vb_live_cell_width_length</th>\n",
       "      <th>vb_num_live_cells</th>\n",
       "      <th>vb_percent_all_apoptosis</th>\n",
       "      <th>vb_percent_all_early_apoptosis</th>\n",
       "      <th>vb_percent_all_late_apoptosis</th>\n",
       "      <th>vb_percent_caspase_dead_only</th>\n",
       "      <th>vb_percent_dead</th>\n",
       "      <th>vb_percent_dead_only</th>\n",
       "      <th>vb_percent_live</th>\n",
       "      <th>vb_ros_back_mean</th>\n",
       "      <th>vb_ros_mean</th>\n",
       "      <th>well_col</th>\n",
       "      <th>well_row</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HCC44</td>\n",
       "      <td>AKT1-1</td>\n",
       "      <td>Plate 1</td>\n",
       "      <td>0.999736</td>\n",
       "      <td>1783</td>\n",
       "      <td>0.5907</td>\n",
       "      <td>0.396</td>\n",
       "      <td>178</td>\n",
       "      <td>0.05181</td>\n",
       "      <td>0.01036</td>\n",
       "      <td>0.04145</td>\n",
       "      <td>1.429</td>\n",
       "      <td>0.07772</td>\n",
       "      <td>0.03627</td>\n",
       "      <td>0.9223</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>HCC44</td>\n",
       "      <td>AKT1-1</td>\n",
       "      <td>Plate 2</td>\n",
       "      <td>0.999736</td>\n",
       "      <td>1594</td>\n",
       "      <td>0.5723</td>\n",
       "      <td>0.3904</td>\n",
       "      <td>138</td>\n",
       "      <td>0.04255</td>\n",
       "      <td>0.03546</td>\n",
       "      <td>0.007092</td>\n",
       "      <td>3</td>\n",
       "      <td>0.02128</td>\n",
       "      <td>0.01418</td>\n",
       "      <td>0.9787</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  cell_id   guide plate_name vb_infection_percentage vb_live_cell_area  \\\n",
       "1   HCC44  AKT1-1    Plate 1                0.999736              1783   \n",
       "2   HCC44  AKT1-1    Plate 2                0.999736              1594   \n",
       "\n",
       "  vb_live_cell_roundness vb_live_cell_width_length vb_num_live_cells  \\\n",
       "1                 0.5907                     0.396               178   \n",
       "2                 0.5723                    0.3904               138   \n",
       "\n",
       "  vb_percent_all_apoptosis vb_percent_all_early_apoptosis  \\\n",
       "1                  0.05181                        0.01036   \n",
       "2                  0.04255                        0.03546   \n",
       "\n",
       "  vb_percent_all_late_apoptosis vb_percent_caspase_dead_only vb_percent_dead  \\\n",
       "1                       0.04145                        1.429         0.07772   \n",
       "2                      0.007092                            3         0.02128   \n",
       "\n",
       "  vb_percent_dead_only vb_percent_live vb_ros_back_mean vb_ros_mean well_col  \\\n",
       "1              0.03627          0.9223              NaN         NaN        3   \n",
       "2              0.01418          0.9787              NaN         NaN        3   \n",
       "\n",
       "  well_row  \n",
       "1        A  \n",
       "2        A  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vb_df = pd.concat(df_dict['viability'], sort=True)\n",
    "vb_df = vb_df.drop_duplicates()\n",
    "\n",
    "print(vb_df.shape)\n",
    "vb_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2303, 75)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cc_all_high_n_spots_h2ax_mean</th>\n",
       "      <th>cc_all_large_notround_polynuclear_mean</th>\n",
       "      <th>cc_all_large_round_polyploid_mean</th>\n",
       "      <th>cc_all_n_objects</th>\n",
       "      <th>cc_all_n_spots_mean</th>\n",
       "      <th>cc_all_n_spots_per_nucleus_area_mean</th>\n",
       "      <th>cc_all_nucleus_area_mean</th>\n",
       "      <th>cc_all_nucleus_roundness_mean</th>\n",
       "      <th>cc_cc_edu_pos_mean</th>\n",
       "      <th>cc_cc_g1_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>vb_num_live_cells</th>\n",
       "      <th>vb_percent_all_apoptosis</th>\n",
       "      <th>vb_percent_all_early_apoptosis</th>\n",
       "      <th>vb_percent_all_late_apoptosis</th>\n",
       "      <th>vb_percent_caspase_dead_only</th>\n",
       "      <th>vb_percent_dead</th>\n",
       "      <th>vb_percent_dead_only</th>\n",
       "      <th>vb_percent_live</th>\n",
       "      <th>vb_ros_back_mean</th>\n",
       "      <th>vb_ros_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.04287</td>\n",
       "      <td>0.007976</td>\n",
       "      <td>0.003988</td>\n",
       "      <td>1003</td>\n",
       "      <td>1.777</td>\n",
       "      <td>67.61</td>\n",
       "      <td>166.2</td>\n",
       "      <td>0.899</td>\n",
       "      <td>0.3865</td>\n",
       "      <td>0.4577</td>\n",
       "      <td>...</td>\n",
       "      <td>1465</td>\n",
       "      <td>0.0271</td>\n",
       "      <td>0.0119</td>\n",
       "      <td>0.0152</td>\n",
       "      <td>1.64</td>\n",
       "      <td>0.03173</td>\n",
       "      <td>0.01652</td>\n",
       "      <td>0.9683</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02635</td>\n",
       "      <td>0.005988</td>\n",
       "      <td>0.005988</td>\n",
       "      <td>835</td>\n",
       "      <td>1.582</td>\n",
       "      <td>58.99</td>\n",
       "      <td>156.2</td>\n",
       "      <td>0.9011</td>\n",
       "      <td>0.355</td>\n",
       "      <td>0.5065</td>\n",
       "      <td>...</td>\n",
       "      <td>1575</td>\n",
       "      <td>0.03169</td>\n",
       "      <td>0.01463</td>\n",
       "      <td>0.01706</td>\n",
       "      <td>1.405</td>\n",
       "      <td>0.03961</td>\n",
       "      <td>0.02255</td>\n",
       "      <td>0.9598</td>\n",
       "      <td>279.6</td>\n",
       "      <td>2083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 75 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  cc_all_high_n_spots_h2ax_mean cc_all_large_notround_polynuclear_mean  \\\n",
       "0                       0.04287                               0.007976   \n",
       "1                       0.02635                               0.005988   \n",
       "\n",
       "  cc_all_large_round_polyploid_mean cc_all_n_objects cc_all_n_spots_mean  \\\n",
       "0                          0.003988             1003               1.777   \n",
       "1                          0.005988              835               1.582   \n",
       "\n",
       "  cc_all_n_spots_per_nucleus_area_mean cc_all_nucleus_area_mean  \\\n",
       "0                                67.61                    166.2   \n",
       "1                                58.99                    156.2   \n",
       "\n",
       "  cc_all_nucleus_roundness_mean cc_cc_edu_pos_mean cc_cc_g1_mean  ...  \\\n",
       "0                         0.899             0.3865        0.4577  ...   \n",
       "1                        0.9011              0.355        0.5065  ...   \n",
       "\n",
       "  vb_num_live_cells vb_percent_all_apoptosis vb_percent_all_early_apoptosis  \\\n",
       "0              1465                   0.0271                         0.0119   \n",
       "1              1575                  0.03169                        0.01463   \n",
       "\n",
       "  vb_percent_all_late_apoptosis vb_percent_caspase_dead_only vb_percent_dead  \\\n",
       "0                        0.0152                         1.64         0.03173   \n",
       "1                       0.01706                        1.405         0.03961   \n",
       "\n",
       "  vb_percent_dead_only vb_percent_live vb_ros_back_mean vb_ros_mean  \n",
       "0              0.01652          0.9683              NaN         NaN  \n",
       "1              0.02255          0.9598            279.6        2083  \n",
       "\n",
       "[2 rows x 75 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge cell cycle and viability\n",
    "merge_ids = ['cell_id', 'guide', 'plate_name', 'well_col', 'well_row']\n",
    "\n",
    "all_df = (\n",
    "    cc_df\n",
    "    .merge(\n",
    "        vb_df,\n",
    "        left_on=merge_ids,\n",
    "        right_on=merge_ids,\n",
    "        how='outer'\n",
    "    )\n",
    ")\n",
    "\n",
    "print(all_df.shape)\n",
    "all_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "output_column_order = [\n",
    "    'cell_id',\n",
    "    'guide',\n",
    "    'plate_name',\n",
    "    'well_col',\n",
    "    'well_row',\n",
    "    'cc_all_high_n_spots_h2ax_mean',\n",
    "    'cc_all_large_notround_polynuclear_mean',\n",
    "    'cc_all_large_round_polyploid_mean',\n",
    "    'cc_all_n_objects',\n",
    "    'cc_all_n_spots_mean',\n",
    "    'cc_all_n_spots_per_nucleus_area_mean',\n",
    "    'cc_all_nucleus_area_mean',\n",
    "    'cc_all_nucleus_roundness_mean',\n",
    "    'cc_cc_edu_pos_mean',\n",
    "    'cc_cc_g1_mean',\n",
    "    'cc_cc_g2_ph3_neg_mean',\n",
    "    'cc_cc_g2_ph3_pos_early_mitosis_mean',\n",
    "    'cc_cc_high_n_spots_h2ax_mean',\n",
    "    'cc_cc_n_objects',\n",
    "    'cc_cc_n_spots_mean',\n",
    "    'cc_cc_n_spots_per_nucleus_area_mean',\n",
    "    'cc_cc_ph3_neg_hoechst_late_mitosis_mean',\n",
    "    'cc_cc_ph3_pos_hoechst_mitosis_mean',\n",
    "    'cc_edu_pos_alexa647_intensity_nucleus_area_mean',\n",
    "    'cc_edu_pos_alexa647_intensity_nucleus_area_sum',\n",
    "    'cc_edu_pos_high_n_spots_h2ax_mean',\n",
    "    'cc_edu_pos_n_objects',\n",
    "    'cc_edu_pos_n_spots_mean',\n",
    "    'cc_edu_pos_n_spots_per_nucleus_area_mean',\n",
    "    'cc_g1_high_n_spots_h2ax_mean',\n",
    "    'cc_g1_n_objects',\n",
    "    'cc_g1_n_spots_mean',\n",
    "    'cc_g1_n_spots_per_nucleus_area_mean',\n",
    "    'cc_g1_plus_g2',\n",
    "    'cc_g2_g1',\n",
    "    'cc_g2_ph3_neg_high_n_spots_h2ax_mean',\n",
    "    'cc_g2_ph3_neg_n_objects',\n",
    "    'cc_g2_ph3_neg_n_spots_mean',\n",
    "    'cc_g2_ph3_neg_n_spots_per_nucleus_area_mean',\n",
    "    'cc_g2_ph3_pos_high_n_spots_h2ax_mean',\n",
    "    'cc_g2_ph3_pos_n_objects',\n",
    "    'cc_g2_ph3_pos_n_spots_mean',\n",
    "    'cc_g2_ph3_pos_n_spots_per_nucleus_area_mean',\n",
    "    'cc_g2_plus_all_m',\n",
    "    'cc_infection_percentage',\n",
    "    'cc_mitosis_ph3_neg_high_n_spots_h2ax_mean',\n",
    "    'cc_mitosis_ph3_neg_n_objects',\n",
    "    'cc_mitosis_ph3_neg_n_spots_mean',\n",
    "    'cc_mitosis_ph3_neg_n_spots_per_nucleus_area_mean',\n",
    "    'cc_mitosis_ph3_pos_high_n_spots_h2ax_mean',\n",
    "    'cc_mitosis_ph3_pos_n_objects',\n",
    "    'cc_mitosis_ph3_pos_n_spots_mean',\n",
    "    'cc_mitosis_ph3_pos_n_spots_per_nucleus_area_mean',\n",
    "    'cc_polynuclear_high_n_spots_h2ax_mean',\n",
    "    'cc_polynuclear_n_objects',\n",
    "    'cc_polynuclear_n_spots_mean',\n",
    "    'cc_polynuclear_n_spots_per_nucleus_area_mean',\n",
    "    'cc_polyploid_high_n_spots_h2ax_mean',\n",
    "    'cc_polyploid_n_objects',\n",
    "    'cc_polyploid_n_spots_mean',\n",
    "    'cc_polyploid_n_spots_per_nucleus_area_mean',\n",
    "    'vb_infection_percentage',\n",
    "    'vb_live_cell_area',\n",
    "    'vb_live_cell_roundness',\n",
    "    'vb_live_cell_width_length',\n",
    "    'vb_num_live_cells',\n",
    "    'vb_percent_all_apoptosis',\n",
    "    'vb_percent_all_early_apoptosis',\n",
    "    'vb_percent_all_late_apoptosis',\n",
    "    'vb_percent_caspase_dead_only',\n",
    "    'vb_percent_dead',\n",
    "    'vb_percent_dead_only',\n",
    "    'vb_percent_live',\n",
    "    'vb_ros_back_mean',\n",
    "    'vb_ros_mean'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2303, 75)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cell_id</th>\n",
       "      <th>guide</th>\n",
       "      <th>plate_name</th>\n",
       "      <th>well_col</th>\n",
       "      <th>well_row</th>\n",
       "      <th>cc_all_high_n_spots_h2ax_mean</th>\n",
       "      <th>cc_all_large_notround_polynuclear_mean</th>\n",
       "      <th>cc_all_large_round_polyploid_mean</th>\n",
       "      <th>cc_all_n_objects</th>\n",
       "      <th>cc_all_n_spots_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>vb_num_live_cells</th>\n",
       "      <th>vb_percent_all_apoptosis</th>\n",
       "      <th>vb_percent_all_early_apoptosis</th>\n",
       "      <th>vb_percent_all_late_apoptosis</th>\n",
       "      <th>vb_percent_caspase_dead_only</th>\n",
       "      <th>vb_percent_dead</th>\n",
       "      <th>vb_percent_dead_only</th>\n",
       "      <th>vb_percent_live</th>\n",
       "      <th>vb_ros_back_mean</th>\n",
       "      <th>vb_ros_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ES2</td>\n",
       "      <td>AKT1-1</td>\n",
       "      <td>Plate 1</td>\n",
       "      <td>3</td>\n",
       "      <td>A</td>\n",
       "      <td>0.04287</td>\n",
       "      <td>0.007976</td>\n",
       "      <td>0.003988</td>\n",
       "      <td>1003</td>\n",
       "      <td>1.777</td>\n",
       "      <td>...</td>\n",
       "      <td>1465</td>\n",
       "      <td>0.0271</td>\n",
       "      <td>0.0119</td>\n",
       "      <td>0.0152</td>\n",
       "      <td>1.64</td>\n",
       "      <td>0.03173</td>\n",
       "      <td>0.01652</td>\n",
       "      <td>0.9683</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ES2</td>\n",
       "      <td>AKT1-1</td>\n",
       "      <td>Plate 1</td>\n",
       "      <td>22</td>\n",
       "      <td>O</td>\n",
       "      <td>0.02635</td>\n",
       "      <td>0.005988</td>\n",
       "      <td>0.005988</td>\n",
       "      <td>835</td>\n",
       "      <td>1.582</td>\n",
       "      <td>...</td>\n",
       "      <td>1575</td>\n",
       "      <td>0.03169</td>\n",
       "      <td>0.01463</td>\n",
       "      <td>0.01706</td>\n",
       "      <td>1.405</td>\n",
       "      <td>0.03961</td>\n",
       "      <td>0.02255</td>\n",
       "      <td>0.9598</td>\n",
       "      <td>279.6</td>\n",
       "      <td>2083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 75 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  cell_id   guide plate_name well_col well_row cc_all_high_n_spots_h2ax_mean  \\\n",
       "0     ES2  AKT1-1    Plate 1        3        A                       0.04287   \n",
       "1     ES2  AKT1-1    Plate 1       22        O                       0.02635   \n",
       "\n",
       "  cc_all_large_notround_polynuclear_mean cc_all_large_round_polyploid_mean  \\\n",
       "0                               0.007976                          0.003988   \n",
       "1                               0.005988                          0.005988   \n",
       "\n",
       "  cc_all_n_objects cc_all_n_spots_mean  ... vb_num_live_cells  \\\n",
       "0             1003               1.777  ...              1465   \n",
       "1              835               1.582  ...              1575   \n",
       "\n",
       "  vb_percent_all_apoptosis vb_percent_all_early_apoptosis  \\\n",
       "0                   0.0271                         0.0119   \n",
       "1                  0.03169                        0.01463   \n",
       "\n",
       "  vb_percent_all_late_apoptosis vb_percent_caspase_dead_only vb_percent_dead  \\\n",
       "0                        0.0152                         1.64         0.03173   \n",
       "1                       0.01706                        1.405         0.03961   \n",
       "\n",
       "  vb_percent_dead_only vb_percent_live vb_ros_back_mean vb_ros_mean  \n",
       "0              0.01652          0.9683              NaN         NaN  \n",
       "1              0.02255          0.9598            279.6        2083  \n",
       "\n",
       "[2 rows x 75 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_df = all_df.loc[:, output_column_order]\n",
    "\n",
    "print(all_df.shape)\n",
    "all_df.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Output File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "file = os.path.join(\"data\", \"cell_health_labels.tsv\")\n",
    "all_df.to_csv(file, index=False, sep='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Output Mapping Dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>original_name</th>\n",
       "      <th>updated_name</th>\n",
       "      <th>feature_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Row</td>\n",
       "      <td>well_row</td>\n",
       "      <td>metadata</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Column</td>\n",
       "      <td>well_col</td>\n",
       "      <td>metadata</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  original_name updated_name feature_type\n",
       "0           Row     well_row     metadata\n",
       "1        Column     well_col     metadata"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file = os.path.join(\"data\", \"feature_mapping.tsv\")\n",
    "\n",
    "feature_df = (\n",
    "    pd.DataFrame(\n",
    "        {**viability_col_names,\n",
    "         **cell_cycle_col_names},\n",
    "        index=[0])\n",
    "    .transpose()\n",
    "    .reset_index()\n",
    "    .rename({\"index\": \"original_name\",\n",
    "             0: \"updated_name\"},\n",
    "            axis='columns')\n",
    "    .assign(\n",
    "        feature_type = [\"metadata\"] * 4 + \\\n",
    "            ['cell_cycle'] + \\\n",
    "            [\"viability\"] * (len(viability_col_names) - 4) + \\\n",
    "            ['cell_cycle'] * (len(cell_cycle_col_names) - 6)\n",
    "    )\n",
    ")\n",
    "\n",
    "feature_df.to_csv(file, sep='\\t', index=False)\n",
    "feature_df.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Count the Number of Guides for Each Measurement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cell_id</th>\n",
       "      <th>guide</th>\n",
       "      <th>num_guides</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A549</td>\n",
       "      <td>AKT1-1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ES2</td>\n",
       "      <td>AKT1-1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  cell_id   guide  num_guides\n",
       "0    A549  AKT1-1           4\n",
       "1     ES2  AKT1-1           4"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "guide_count_df = (\n",
    "    all_df\n",
    "    .groupby(\n",
    "        ['cell_id', 'guide']\n",
    "    )['plate_name']\n",
    "    .count()\n",
    "    .reset_index()\n",
    "    .rename({'plate_name': 'num_guides'}, axis='columns')\n",
    "    .sort_values(by=['num_guides', 'guide'])\n",
    "    .reset_index(drop=True)\n",
    ")\n",
    "\n",
    "file = os.path.join(\"data\", \"num_guides_cell_health.tsv\")\n",
    "guide_count_df.to_csv(file, sep='\\t', index=False)\n",
    "\n",
    "guide_count_df.head(2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:cell-health] *",
   "language": "python",
   "name": "conda-env-cell-health-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
